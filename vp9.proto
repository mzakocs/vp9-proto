syntax = "proto3";

/* 
  Protobuf Specification for the VP9 Video Codec 
  spec: https://storage.googleapis.com/downloads.webmproject.org/docs/vp9/vp9-bitstream-specification-v0.6-20160331-draft.pdf 
*/

// TODO: Implement SuperFrames
// TODO: Backport VP8 Protobuf

message VP9SignedInteger {
  bytes value = 1; // n bits to store signed integer value
  VP9BitField sign = 2; // 1 bit to determine signedness of integer
}

enum VP9BitField {
  ZERO = 0;
  ONE = 1;
}

message UncompressedHeader {

  message ColorConfig {
    enum ColorSpace {
      CS_UNKNOWN = 0;
      CS_BT_601 = 1;
      CS_BT_709 = 2;
      CS_SMPTE_170 = 3;
      CS_SMPTE_240 = 4;
      CS_BT_2020 = 5;
      CS_RESERVED = 6;
      CS_RGB = 7;
    }

    VP9BitField ten_or_twelve_bit = 1; // 1 bit
  
    uint32 color_space = 2; // 3 bits
  
    VP9BitField color_range = 3; // 1 bit
  
    VP9BitField subsampling_x = 4; // 1 bit, only present if profile == 1 or profile == 3
    VP9BitField subsampling_y = 5; // 1 bit, only present if profile == 1 or profile == 3
  
    VP9BitField reserved_zero = 6; // 1 bit
  }
  
  message FrameSize {
    uint32 frame_width_minus_1 = 1; // 16 bit
  
    uint32 frame_height_minus_1 = 2; // 16 bit
  }

  enum FrameType {
    KEY_FRAME = 0;
    NON_KEY_FRAME = 1;
  }
  
  message RenderSize {
    VP9BitField render_and_frame_size_different = 1; // 1 bit
  
    uint32 render_width_minus_1 = 2; // 16 bit
  
    uint32 render_height_minus_1 = 3; // 16 bit
  }

  enum InterpolationFilter {
    EIGHTTAP = 0;
    EIGHTTAP_SMOOTH = 1;
    EIGHTTAP_SHARP = 2;
    BILINEAR = 3;
    SWITCHABLE = 4;
  }
  
  message ReadInterpolationFilter {
    VP9BitField is_filter_switchable = 1; // 1 bit
  
    InterpolationFilter raw_interpolation_filter = 2; // 2 bits
  }
  
  message LoopFilterParams {
    message RefDelta {
      VP9BitField update_ref_delta = 1; // 1 bit
      VP9SignedInteger loop_filter_ref_deltas = 2; // 7 bits
    }
    message ModeDelta {
      VP9BitField update_mode_delta = 1; // 1 bit
      VP9SignedInteger loop_filter_mode_deltas = 2; // 7 bits
    }

    uint32 loop_filter_level = 1; // 6 bits
    uint32 loop_filter_sharpness = 2; // 3 bits
    VP9BitField loop_filter_delta_enabled = 3; // 1 bit
    VP9BitField loop_filter_delta_update = 4; // 1 bit
  
    repeated RefDelta ref_delta = 5;
  
    repeated ModeDelta mode_delta = 6;
  }
  
  message QuantizationParams {
    message ReadDeltaQ {
      VP9BitField delta_coded = 1; // 1 bit
      VP9SignedInteger delta_q = 2; // 5 bits
    }
    uint32 base_q_idx = 1; // 8 bits
    ReadDeltaQ delta_q_y_dc = 2; // 6 bits
    ReadDeltaQ delta_q_uv_dc = 3; // 6 bits
    ReadDeltaQ delta_q_uv_ac = 4; // 6 bits
  }

  message TileInfo {
    // Currently not implemented as it would require for full tile size calculation
    repeated VP9BitField increment_tile_cols_log2 = 1; // 1 bit

    VP9BitField tile_rows_log2 = 2; // 1 bit
    VP9BitField increment_tile_rows_log2 = 3; // 1 bit
  }
  
  message SegmentationParams {

    message ReadProb {
      VP9BitField prob_coded = 1; // 1 bit
      uint32 prob = 2;
    }

    message Feature {
      VP9BitField feature_enabled = 1; // 1 bit
      bytes feature_value = 2; // 0-8 bits
      VP9BitField feature_sign = 3; // 1 bit
    }

    VP9BitField segmentation_enabled = 1; // 1 bit
  
    VP9BitField segmentation_update_map = 2; // 1 bit
  
    VP9BitField segmentation_temporal_update = 3; // 1 bit

    repeated ReadProb prob = 4;
  
    VP9BitField segmentation_update_data = 5; // 1 bit
  
    VP9BitField segmentation_abs_or_delta_update = 6; // 1 bit
  
    repeated Feature features = 7; // 6 - 30 bits
  }

  VP9BitField profile_low_bit = 1;  // 1 bits
  VP9BitField profile_high_bit = 2; // 1 bits

  uint32 reserved_zero = 3; // 1 bit
  
  VP9BitField show_existing_frame = 4; // 1 bit

  uint32 frame_to_show_map_idx = 5; // 3 bits

  FrameType frame_type = 6; // 1 bit
  
  VP9BitField show_frame = 7; // 1 bit

  VP9BitField error_resilient_mode = 8; // 1 bit

  uint32 frame_sync_code = 9; // 24 bits, frame_sync_code() in spec

  ColorConfig color_config = 10; // 8 bits, color_config() in spec

  uint32 frame_size_found_ref = 11; // 3 bits, found_ref inside frame_size_with_refs() in spec

  FrameSize frame_size = 12; // 32 bits, frame_size() in spec

  RenderSize render_size = 13; // 1-33 bits, render_size() in spec 

  VP9BitField intra_only = 14; // 1 bit

  uint32 reset_frame_context = 15; // 2 bits

  uint32 refresh_frame_flags = 16; // 8 bits
  
  repeated uint32 ref_frame_idx = 17; // 9 bits

  repeated VP9BitField ref_frame_sign_bias = 18; // 3 bits

  VP9BitField allow_high_precision_mv = 19; // 1 bit

  ReadInterpolationFilter read_interpolation_filter = 20; // 3 bits, read_interpolation_filter() in spec

  VP9BitField refresh_frame_context = 21; // 1 bit

  VP9BitField frame_parallel_decoding_mode = 22; // 1 bit

  uint32 frame_context_idx = 23; // 2 bits

  LoopFilterParams loop_filter_params = 24; // 27 bits, loop_filter_params() in spec
  QuantizationParams quantization_params = 25; // 8 bits, quantization_params() in spec
  SegmentationParams segmentation_params = 26; // ? bits, segmentation_params() in spec
  TileInfo tile_info = 27; // ? bits, tile_info() in spec 

  // add a boolean field that tells the fuzzer to use a random value for the size

  // uint32 header_size_in_bytes = 28; // 16 bits
}

message CompressedHeader {

  enum TxMode {
    ONLY_4X4 = 0;
    ALLOW_8X8 = 1;
    ALLOW_16X16 = 2;
    ALLOW_32X32 = 3;
    TX_MODE_SELECT = 4;
  }

  message ReadTxMode {
    TxMode tx_mode = 1; // 2 bits
    VP9BitField tx_mode_select = 2; // 1 bit, only in header if tx_mode == ALLOW_32X32
  }

  message DecodeTermSubexp {
    VP9BitField bit_1 = 1; // 1 bit
    uint32 sub_exp_val = 2; // 4 bits
    VP9BitField bit_2 = 3; // 4 bits
    uint32 sub_exp_Val_minus_16 = 4; // 4 bits
    VP9BitField bit_3 = 5; // 1 bit
    uint32 sub_exp_val_minus_32 = 6; // 5 bits
    uint32 v = 7; // 7 bits
    VP9BitField bit_4 = 8; // 1 bit
  }

  message DiffUpdateProb {
    VP9BitField update_prob = 1; // 1 bit, 252/256 probability of == 0
    DecodeTermSubexp decode_term_subexp = 2; // 5-27 bits
  }

  message TxModeProbs {
    // First loop iterates 2 * 1 (2) times
    // Second loop iterates 2 * 2 (4) times
    // Third loop iterates 2 * 3 (6) times
    // Total 12 loops
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message ReadCoefProbs {
    message ReadCoefProbsLoop {
      VP9BitField update_probs = 1; // 1 bit
      // Nested loop iterates (2 * 2 * 5 * 6 * 3) + (2 * 2 * 1 * 3 * 3) (396) times
      repeated DiffUpdateProb diff_update_prob = 2; // 6-28 * n bits
    }
    // First loop iterates up to 4 times (when maxTxSize == 4 and txSz == 0)
    repeated ReadCoefProbsLoop read_coef_probs = 1; // 7-29 * n? bits
  }

  message ReadSkipProb {
    // Loop iterates 3 times
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message ReadInterModeProbs {
    // Loop iterates 7 * 3 (21) times
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message ReadInterpFilterProbs {
    // Loop iterates 7 * 2 (14) times
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message ReadIsInterProbs {
    // Loop iterates 4 times
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message FrameReferenceMode {
    VP9BitField non_single_reference = 1; // 1 bit
    VP9BitField reference_select = 2; // 1 bit
  }

  message FrameReferenceModeProbs {
    // First loop iterates 5 times
    // Second loop iterates 5 times
    // Third loop iterates 5 times 
    // Total 15 loops (but some conditional)
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message ReadYModeProbs {
    // Loop iterates 4 * 9 (36) times
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message ReadPartitionProbs {
    // Loop iterates 16 * 3 (48) times
    repeated DiffUpdateProb diff_update_prob = 1; // 6-28 * n bits
  }

  message MvProbs {
    message MvProbsLoop {
      VP9BitField update_mv_prob = 1; // 1 bit, 252/256 probability of == 0
      uint32 mv_prob = 2; // 7 bits
    }
    // First loop iterates 3 times
    // Second loop iterates 2*2 + 2*(11-1) + 2*10 (44) times
    // Third loop iterates 2*2*(4-1) + 2*(4-1) (18) times
    // Fourth loop iterates 2*2 (4) times
    // Total 69 loops
    repeated MvProbsLoop mv_probs = 1; // 8 * n bits
  }

  ReadTxMode read_tx_mode = 1; // read_tx_mode() in spec
  TxModeProbs tx_mode_probs = 2; // tx_mode_probs() in spec

  ReadCoefProbs read_coef_probs = 3; // read_coef_probs() in spec
  ReadSkipProb read_skip_prob = 4; // read_skip_prob() in spec
  ReadInterModeProbs read_inter_mode_probs = 5; // read_inter_mode_probs() in spec
  ReadInterpFilterProbs read_interp_filter_probs = 6; // read_interp_filter_probs() in spec
  ReadIsInterProbs read_is_inter_probs = 7; // read_is_inter_probs() in spec

  FrameReferenceMode frame_reference_mode = 8; // frame_reference_mode() in spec
  FrameReferenceModeProbs frame_reference_mode_probs = 9; // frame_reference_mode_probs() in spec

  ReadYModeProbs read_y_mode_probs = 10; // read_y_mode_probs() in spec
  ReadPartitionProbs read_partition_probs = 11; // read_partition_probs() in spec

  MvProbs mv_probs = 12; // mv_probs() in spec
}

// message Block {
    
//   // message IntraFrameModeInfo {
//   //   bytes segment_id = 1; // intra_segment_id() in spec
//   //   bytes skip = 2; // read_skip() in spec
//   //   bytes tx_size = 3; // read_tx_size() in spec
    
//   //   bytes default_intra_mode = 4;

//   //   bytes default_uv_mode = 5;
//   // }

//   // message InterFrameModeInfo {
//   //   bytes segment_id = 1; // inter_segment_id() in spec
//   //   bytes skip = 2; // read_skip() in spec
//   //   bytes is_inter = 3; // read_is_inter() in spec
//   //   bytes tx_size = 4; // read_tx_size() in spec

//   //   oneof next_frame { // should only use inter_frame if is_inter == true per the spec
//   //     IntraFrameModeInfo intra_frame = 5;
//   //     InterFrameModeInfo inter_frame = 6;
//   //   }
//   // }

//   // oneof mode_info {
//   //   IntraFrameModeInfo intra_frame = 1;
//   //   InterFrameModeInfo inter_frame = 2;
//   // }
//   bytes frame = 1; // TODO: better define this field, difficult because of tree structure however

//   bytes residual = 2; // TODO: better define this field
// }

// message Partition {
//   bytes partition = 1;

//   Block block = 2;
// }

message Tile {
  // uint32 tile_size = 1; // 32 bits

  // add a boolean field that tells the fuzzer to use a random value for the size

  bytes partition = 1;
}

message VP9Frame {
  UncompressedHeader uncompressed_header = 1; // uncompressed_header() in spec

  CompressedHeader compressed_header = 2; // compressed_header() in spec

  repeated Tile tile = 3;
}

message VP9IVF {
  VP9Frame vp9_frame_1 = 1;
  VP9Frame vp9_frame_2 = 2;
  VP9Frame vp9_frame_3 = 3;
}